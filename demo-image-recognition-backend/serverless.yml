frameworkVersion: '3'
service: demo-image-recognition
app: backend
useDotenv: true
provider:
  name: aws
  runtime: nodejs20.x
  deploymentMethod: direct
  versionFunctions: false
  iam:
    role: DefaultRole
  httpApi:
    cors: true
  stage: dev-1
  tags:
    Service: ${self:service}
    Environment: ${env:STAGE, "dev"}
  stackTags:
    Service: ${self:service}
    Environment: ${env:STAGE, "dev"}
  region: ${opt:region, "ap-northeast-2"}
  stackName: ${self:service}-${env:STAGE, "dev"}-${env:VER, "1"}-serverless
  timeout: 29
  environment:
    service: ${self:service}
    version: ${env:VER, "1"}
    stage: ${env:STAGE, "dev"}
    region: ${opt:region, "ap-northeast-2"}
    app: ${self:app}
    file_bucket_name:
      Ref: ImageBucket
    CHATGPTAPIKEY: ${env:CHATGPTAPIKEY}
    socket_api_gateway_id:
      Ref: WebsocketsApi
    stream_url_parm: /${self:service}/${env:STAGE, "dev"}/stream_url/${env:VER, "1"}
  deploymentBucket:
    name: ${aws:accountId}-serverless-deploys
    maxPreviousDeploymentArtifacts: 5
    blockPublicAccess: true
  deploymentPrefix: ${self:service}-${env:STAGE, "dev"}-${env:VER, "1"}-serviceBackend
plugins:
  - serverless-deployment-bucket
  - serverless-cloudformation-sub-variables
resources:
  Resources:
    EmptyS3LambdaExecutionRole:
      Type: AWS::IAM::Role
      Properties:
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action:
                - sts:AssumeRole
        Path: /
        Policies:
          - PolicyName: root
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - s3:*
                  Resource: '*'
                - Effect: Allow
                  Action:
                    - logs:CreateLogGroup
                    - logs:CreateLogStream
                    - logs:PutLogEvents
                  Resource: '*'
    EmptyS3BucketLambda:
      Type: AWS::Lambda::Function
      Properties:
        Handler: index.handler
        Role:
          Fn::GetAtt:
            - EmptyS3LambdaExecutionRole
            - Arn
        Runtime: python3.12
        Timeout: 600
        Code:
          ZipFile: |
            #!/usr/bin/env python
            # -*- coding: utf-8 -*-
            import json
            import boto3
            from botocore.vendored import requests
            def handler(event, context):
                try:
                    bucket = event['ResourceProperties']['BucketName']
                    if event['RequestType'] == 'Delete':
                        s3 = boto3.resource('s3')
                        bucket = s3.Bucket(bucket)
                        for obj in bucket.objects.filter():
                            s3.Object(bucket.name, obj.key).delete()
                    sendResponseCfn(event, context, "SUCCESS")
                except Exception as e:
                    print(e)
                    sendResponseCfn(event, context, "FAILED")

            def sendResponseCfn(event, context, responseStatus):
                response_body = {'Status': responseStatus,
                                'Reason': 'Log stream name: ' + context.log_stream_name,
                                'PhysicalResourceId': context.log_stream_name,
                                'StackId': event['StackId'],
                                'RequestId': event['RequestId'],
                                'LogicalResourceId': event['LogicalResourceId'],
                                'Data': json.loads("{}")}
                requests.put(event['ResponseURL'], data=json.dumps(response_body))
    ImageSQSQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: ${self:service}-${env:STAGE, "dev"}-imagequeue-${env:VER, "1"}
        VisibilityTimeout: 500
    ImageBucket:
      Type: AWS::S3::Bucket
      DeletionPolicy: Delete
      Properties:
        NotificationConfiguration:
          QueueConfigurations:
            - Event: s3:ObjectCreated:*
              Queue:
                Fn::GetAtt:
                  - ImageSQSQueue
                  - Arn
        PublicAccessBlockConfiguration:
          BlockPublicAcls: false
          BlockPublicPolicy: false
          IgnorePublicAcls: false
          RestrictPublicBuckets: false
        OwnershipControls:
          Rules:
            - ObjectOwnership: ObjectWriter
        BucketName: ${aws:accountId}-${self:service}-${env:STAGE, "dev"}-imagebucket-${env:VER, "1"}
        CorsConfiguration:
          CorsRules:
            - AllowedHeaders:
                - '*'
              AllowedMethods:
                - PUT
              AllowedOrigins:
                - '*'
              Id: myCORSRuleId1
        LifecycleConfiguration:
          Rules:
            - AbortIncompleteMultipartUpload:
                DaysAfterInitiation: 1
              NoncurrentVersionExpirationInDays: 1
              Status: Enabled
    SQSQueuePolicy:
      Type: AWS::SQS::QueuePolicy
      Properties:
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                AWS: '*'
              Action: SQS:SendMessage
              Resource: '*'
              Condition:
                ArnLike:
                  aws:SourceArn: arn:aws:s3:::${aws:accountId}-${self:service}-${env:STAGE, "dev"}-imagebucket-${env:VER, "1"}
        Queues:
          - Ref: ImageSQSQueue
    ImageBucketBucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        Bucket:
          Ref: ImageBucket
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Sid: PublicReadGetObject
              Effect: Allow
              Principal: '*'
              Action:
                - s3:GetObject
              Resource:
                - Fn::Sub: arn:aws:s3:::${ImageBucket}/*
    DefaultRole:
      Type: AWS::IAM::Role
      Properties:
        RoleName: ${self:service}-${env:STAGE, "dev"}-${env:VER, "1"}-LambdaExcutionRole
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action: sts:AssumeRole
            - Effect: Allow
              Principal:
                Service:
                  - iam.amazonaws.com
              Action: sts:AssumeRole
        ManagedPolicyArns:
          - arn:aws:iam::aws:policy/AmazonEC2FullAccess
          - arn:aws:iam::aws:policy/AmazonS3FullAccess
          - arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess
          - arn:aws:iam::aws:policy/AmazonRDSDataFullAccess
          - arn:aws:iam::aws:policy/AmazonSQSFullAccess
          - arn:aws:iam::aws:policy/CloudWatchFullAccess
        Policies:
          - PolicyName: myPolicyName
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - sts:AssumeRole
                    - execute-api:*
                  Resource: '*'
    MessageTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:service}-${env:STAGE, "dev"}-${env:VER, "1"}-descriptions
        AttributeDefinitions:
          - AttributeName: image_url
            AttributeType: S
        KeySchema:
          - AttributeName: image_url
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
    UserListTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:service}-${env:STAGE, "dev"}-${env:VER, "1"}-userlist
        AttributeDefinitions:
          - AttributeName: connection_id
            AttributeType: S
          - AttributeName: session_id
            AttributeType: S
        KeySchema:
          - AttributeName: connection_id
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
        GlobalSecondaryIndexes:
          - IndexName: session_id-index
            KeySchema:
              - AttributeName: session_id
                KeyType: HASH
            Projection:
              ProjectionType: ALL
    StreamUnderscoregetLambdaFunctionUrl:
      Properties:
        InvokeMode: RESPONSE_STREAM
    StreamURLParm:
      Type: AWS::SSM::Parameter
      Properties:
        Name: /${self:service}/${env:STAGE, "dev"}/stream_url/${env:VER, "1"}
        Type: String
        Value:
          Fn::GetAtt:
            - StreamUnderscoregetLambdaFunctionUrl
            - FunctionUrl
        Description: StreamURLParm
  Outputs:
    ServerlessDeploymentBucketName:
      Export:
        Name: ${self:provider.stackName}-ServiceEndpoint
      Value: ${self:provider.stackName}-ServiceEndpoint
    HttpApiUrl:
      Export:
        Name: ${self:provider.stackName}-HttpApiUrl
    HttpApiId:
      Export:
        Name: ${self:provider.stackName}-HttpApiId
custom: null
functions:
  socket_default:
    name: ${self:service}_dev_1_socket_default
    handler: src/lambda/socket/default.handler
    events:
      - websocket:
          route: $default
  socket_onConnect:
    name: ${self:service}_dev_1_socket_onConnect
    handler: src/lambda/socket/onConnect.handler
    events:
      - websocket:
          route: $connect
  socket_onDisconnect:
    name: ${self:service}_dev_1_socket_onDisconnect
    handler: src/lambda/socket/onDisconnect.handler
    events:
      - websocket:
          route: $disconnect
  image_upload_processQueue:
    name: ${self:service}_dev_1_image_upload_processQueue
    handler: src/lambda/image/upload/processQueue.handler
    events:
      - sqs:
          arn:
            Fn::GetAtt:
              - ImageSQSQueue
              - Arn
          batchSize: 1
    timeout: 300
  image_upload_singlepart_get:
    name: ${self:service}_dev_1_image_upload_singlepart_get
    handler: src/lambda/image/upload/singlepart/get.handler
    events:
      - httpApi:
          path: /dev/image/upload/singlepart
          method: get
  stream_get:
    name: ${self:service}_${env:STAGE, "dev"}_${env:VER, "1"}_stream_get
    handler: src/lambda/stream/get.handler
    url:
      cors: true
    timeout: 300
